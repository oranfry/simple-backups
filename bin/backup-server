#!/bin/bash

set -e

gzip_flag=
gzip_ext=
save_space=
pdir=backup
backup_owner=root
tar_opts=
invalid=
verbose=

while getopts ":o:p:zsv" opt; do
    case ${opt} in
        o )
            backup_owner=$OPTARG
            ;;
        p )
            pdir=$OPTARG
            ;;
        z )
            gzip_flag=z
            gzip_ext=.gz
            ;;
        s )
            save_space=1
            tar_opts="--remove-files"
            ;;
        v )
            verbose=1
            ;;
        \? )
            echo "Invalid option: $OPTARG" 1>&2
            invalid=1
            ;;
        : )
            echo "Invalid option: $OPTARG requires an argument" 1>&2
            invalid=1
            ;;
    esac
done
shift $((OPTIND -1))

host=$1

if [ "${host}" == "" ]; then
        echo no host given
        exit
fi

if [ -n "${invalid}" ]; then
    exit
fi

OWNER_HOME="$(eval echo ~$backup_owner)"

if [ ! -d "${OWNER_HOME}" ]; then
    echo "Owner home directory (${OWNER_HOME}) does not exist" 1>&2
    exit 1
fi

(
    cd "${OWNER_HOME}"

    if [ ! -d "${pdir}" ]; then
        echo "Parent directory (${pdir}) does not exist" 1>&2
        exit 1
    fi
)

CLONE_HOME="/root/.clone/${host}"
PARENT_DIR="$(cd "$(eval echo ~$backup_owner)" && cd "${pdir}" && pwd)"
TAR_HOME="${PARENT_DIR}/${host}"
TAR_FILE="${TAR_HOME}/backup.tar${gzip_ext}"
LIST_FILE="${TAR_HOME}/files.list"
LOCK_FILE="/tmp/backup-server.${host}.lock"

test -n "$verbose" && echo -e "PARENT_DIR: $PARENT_DIR"
test -n "$verbose" && echo -e "CLONE_HOME: $CLONE_HOME"
test -n "$verbose" && echo -e "TAR_HOME:     $TAR_HOME"
test -n "$verbose" && echo -e "TAR_FILE:     $TAR_FILE"
test -n "$verbose" && echo -e "LIST_FILE:    $LIST_FILE"
test -n "$verbose" && echo

if [ ! -e "${LIST_FILE}" ]; then
    echo "Expected to find file list at: ${LIST_FILE}" 1>&2
    exit 1
fi

if [ -e "${LOCK_FILE}" ]; then
	echo "Cowardly refusing to run two backup processes at the same time" 1>&2
	exit 1
fi

test -n "$verbose" && echo -e "Locking...\n"
echo '1' > "${LOCK_FILE}"

mkdir -p "${CLONE_HOME}"
mkdir -p "${CLONE_HOME}.new"
mkdir -p "${TAR_HOME}"

chown $backup_owner:$backup_owner "${TAR_HOME}"

if [ -n "${save_space}" -a -s "${TAR_FILE}" ]; then
    test -n "$verbose" && echo -e "Extracting existing backup...\n"
    rm -rf "${CLONE_HOME}" && mkdir "${CLONE_HOME}" && /bin/tar -C "${CLONE_HOME}" -x${gzip_flag}f "${TAR_FILE}"
fi

set -o noglob
includesrel=$(cat "${LIST_FILE}" | while read f; do while [ "$f" != "/" ]; do echo "$f"; f="$(dirname "$f")"; done; done | sort | uniq | while read f; do echo " '--include=$(echo $f | sed 's,^/,,')'"; done)
cmd="/usr/bin/rsync -a --remove-source-files $includesrel '--exclude=*' '${CLONE_HOME}/' '${CLONE_HOME}.new'"
set +o noglob

test -n "$verbose" && echo -e "Pruning cache based on file patterns...\n$cmd\n"
eval $cmd

rm -rf "${CLONE_HOME}"
mv "${CLONE_HOME}.new" "${CLONE_HOME}"

set -o noglob
includes=$(cat "${LIST_FILE}" | while read f; do while [ "$f" != "/" ]; do echo "$f"; f="$(dirname "$f")"; done; done | sort | uniq | while read f; do echo " '--include=$f'"; done)
cmd="/usr/bin/rsync --rsync-path='sudo rsync' -az --delete $includes '--exclude=*' ${host}:/ '${CLONE_HOME}'"
set +o noglob

test -n "$verbose" && echo -e "Rsync'ing with server...\n$cmd\n"
eval $cmd

test -n "$verbose" && echo -e "Removing existing backup...\n"
rm -f "${TAR_FILE}" # frees up space for the new archive

TAR_FILE_TMP="/tmp/${host}.tar${gzip_ext}"
test -n "$verbose" && echo -e "Creating new backup...\n"
(/bin/tar -C "${CLONE_HOME}" $tar_opts -c${gzip_flag}f "${TAR_FILE_TMP}" . && chown $backup_owner:$backup_owner "${TAR_FILE_TMP}" && mv "${TAR_FILE_TMP}" "${TAR_FILE}")

if [ -n "${save_space}" -a -s "${TAR_FILE}" ]; then
    test -n "$verbose" && echo -e "Clearing cache...\n"
    rm -rf "${CLONE_HOME}"
fi

test -n "$verbose" && echo -e "Unlocking...\n"
rm "${LOCK_FILE}"
